// js/data.js: статические данные для калькулятора

// Рецепты производства конечных материалов
// Ключ: Название конечного материала
// Значение: Объект { Название_Ресурса: Количество_На_Единицу }
export const recipes = {
  "Электронные компоненты": { "Железная руда": 1, "Полиэлементная руда": 1, "Крокит": 1 },
  "Алюминий": { "Железная руда": 1, "Полиэлементная руда": 2, "Иридиум": 1 },
  "Сталь": { "Железная руда": 2, "Полиэлементная руда": 1, "Митрацит": 1 },
  "Титановый сплав": { "Железная руда": 1, "Полиэлементная руда": 1, "Титанит": 1 },
  "Нановолокно": { "Железная руда": 1, "Полиэлементная руда": 1, "Брадий": 1 },
  "Полимеры": { "Полиорганическая руда": 2, "Полиэлементная руда": 1 },
  "Композиты": {
    "Полиорганическая руда": 2,
    "Полиэлементная руда": 1,
    "Железная руда": 1,
    "Иридиум": 1,
    "Митрацит": 1
  }
};

// Генерация полной матрицы преобразований (все-в-ко-все)
const allResources = [
  'Железная руда',
  'Полиэлементная руда',
  'Полиорганическая руда',
  'Уран',
  'Митрацит',
  'Иридиум',
  'Крокит',
  'Брадий',
  'Титанит'
];

// Базовые коэффициенты (как было раньше)
export const baseConversions = {
  "Железная руда": {
    "Полиэлементная руда": 2,
    "Полиорганическая руда": 2,
    "Уран": 1,
    "Митрацит": 1,
    "Иридиум": 1,
    "Крокит": 0.7,
    "Брадий": 0.2,
    "Титанит": 0.1
  },
  "Полиэлементная руда": {
    "Железная руда": 2,
    "Полиорганическая руда": 2,
    "Уран": 1,
    "Митрацит": 1,
    "Иридиум": 1,
    "Крокит": 0.7,
    "Брадий": 0.2,
    "Титанит": 0.1
  },
  "Полиорганическая руда": {
    "Железная руда": 2,
    "Полиэлементная руда": 2,
    "Уран": 1,
    "Митрацит": 1,
    "Иридиум": 1,
    "Крокит": 0.7,
    "Брадий": 0.2,
    "Титанит": 0.1
  },
  "Уран": {
    "Железная руда": 2,
    "Полиэлементная руда": 2,
    "Полиорганическая руда": 2,
    "Митрацит": 2,
    "Иридиум": 2,
    "Крокит": 1.4,
    "Брадий": 0.4,
    "Титанит": 0.2
  },
  "Митрацит": {
    "Железная руда": 4,
    "Полиэлементная руда": 4,
    "Полиорганическая руда": 4,
    "Уран": 2,
    "Иридиум": 2,
    "Крокит": 1.4,
    "Брадий": 0.4,
    "Титанит": 0.2
  },
  "Иридиум": {
    "Железная руда": 4,
    "Полиэлементная руда": 4,
    "Полиорганическая руда": 4,
    "Уран": 2,
    "Митрацит": 2,
    "Крокит": 1.4,
    "Брадий": 0.4,
    "Титанит": 0.2
  },
  "Крокит": {
    "Железная руда": 6,
    "Полиэлементная руда": 6,
    "Полиорганическая руда": 6,
    "Уран": 3,
    "Митрацит": 3,
    "Иридиум": 3,
    "Брадий": 0.6,
    "Титанит": 0.3
  },  
  "Брадий": {
    "Железная руда": 20,
    "Полиэлементная руда": 20,
    "Полиорганическая руда": 20,
    "Уран": 10,
    "Митрацит": 10,
    "Иридиум": 10,
    "Крокит": 6.7,
    "Титанит": 1
  },
  "Титанит": {
    "Железная руда": 40,
    "Полиэлементная руда": 40,
    "Полиорганическая руда": 40,
    "Уран": 20,
    "Митрацит": 20,
    "Иридиум": 20,
    "Крокит": 13.4,
    "Брадий": 4
  },
};

// Генерируем полную матрицу (все-в-ко-все, включая себя)
export const conversions = {};
for (const res of allResources) {
  conversions[res] = {};
  for (const src of allResources) {
    if (res === src) {
      conversions[res][src] = 1;
    } else if (baseConversions[res] && baseConversions[res][src]) {
      conversions[res][src] = baseConversions[res][src];
    } else if (baseConversions[src] && baseConversions[src][res]) {
      // Обратное преобразование: 1 / коэффициент (с учётом потерь)
      conversions[res][src] = +(1 / baseConversions[src][res] * 1.1).toFixed(4);
    } else {
      conversions[res][src] = null; // нет прямого или обратного пути
    }
  }
}

// Множитель потерь при преобразовании руды/урана в минералы (+10%)
export const CONVERSION_LOSS_FACTOR = 1.1;

// Список конечных материалов (для таблицы ввода цели)
export const materialsList = [
  { id: 'electronic-components', name: 'Электронные компоненты', icon: 'images/32-16.png' },
  { id: 'aluminum', name: 'Алюминий', icon: 'images/46-16.png' },
  { id: 'steel', name: 'Сталь', icon: 'images/47-16.png' },
  { id: 'titanium-alloy', name: 'Титановый сплав', icon: 'images/48-16.png' },
  { id: 'nanofiber', name: 'Нановолокно', icon: 'images/49-16.png' },
  { id: 'polymers', name: 'Полимеры', icon: 'images/50-16.png' },
  { id: 'composites', name: 'Композиты', icon: 'images/51-16.png' }
];

// Список всех базовых ресурсов (для таблицы вывода потребностей)
export const baseResourcesList = [
  // Ores & Uranium
  { id: 'iron-ore', name: 'Железная руда', icon: 'images/1-16.png', isMineral: false },
  { id: 'poly-ore', name: 'Полиэлементная руда', icon: 'images/2-16.png', isMineral: false },
  { id: 'polyorg-ore', name: 'Полиорганическая руда', icon: 'images/3-16.png', isMineral: false },
  { id: 'uranium', name: 'Уран', icon: 'images/4-16.png', isMineral: false },
  // Minerals
  { id: 'mitracite', name: 'Митрацит', icon: 'images/5-16.png', isMineral: true },
  { id: 'iridium', name: 'Иридиум', icon: 'images/6-16.png', isMineral: true },
  { id: 'krocite', name: 'Крокит', icon: 'images/7-16.png', isMineral: true },
  { id: 'bradium', name: 'Брадий', icon: 'images/8-16.png', isMineral: true },
  { id: 'titanite', name: 'Титанит', icon: 'images/9-16.png', isMineral: true }
];

// Вспомогательный массив только с именами минералов (для удобства)
export const mineralsListNames = baseResourcesList
    .filter(r => r.isMineral)
    .map(r => r.name);

// Вспомогательный массив с именами источников для конверсии (руды + уран)
export const conversionSourcesNames = baseResourcesList
    .filter(r => !r.isMineral)
    .map(r => r.name);
